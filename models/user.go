package models

import (
	"fmt"
	"time"

	"net/url"

	"github.com/gofiber/fiber/v2"
	"portalnesia.com/api/config"
)

type WebauthnKeys struct {
	// A probabilistically-unique byte sequence identifying a public key credential source and its authentication assertions.
	ID []byte `json:"id"`
	// The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
	// a Relying Party at registration time (see also public key credential). The private key portion of the credential key
	// pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
	// used as the attestation key pair, see self attestation for details.
	PublicKey string    `json:"key"`
	Datetime  time.Time `json:"datetime"`
	Device    string    `json:"device"`
}

type TelegramJson struct {
	ID        string    `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Username  string    `json:"username"`
	AuthDate  time.Time `json:"auth_date"`
	PhotoUrl  string    `json:"photo_url"`
	Hash      string    `json:"hash"`
}

type InstagramToken struct {
	Token string `json:"token"`
	ID    string `json:"id"`
}

type TwitterToken struct {
	OauthToken       string `json:"oauth_token"`
	OauthTokenSecret string `json:"oauth_token_secret"`
	ScreenName       string `json:"screen_name"`
	UserID           uint   `json:"user_id"`
}

type UserPagination struct {
	ID       uint64  `json:"id" gorm:"column:id;primaryKey;column:id"`
	Name     *string `json:"name" gorm:"column:user_nama"`
	Username string  `json:"username" gorm:"column:user_login"`
	Verify   bool    `json:"verify" gorm:"column:verify"`
	Picture  *string `json:"picture" gorm:"-"`
}

type BaseUser struct {
	UserPagination
	About        *string    `json:"about" gorm:"column:biodata;"`
	Private      bool       `json:"private" gorm:"column:private"`
	Suspend      bool       `json:"suspend"`
	Paid         bool       `json:"paid" gorm:"column:paid"`
	MediaPrivate bool       `json:"media_private" gorm:"column:media_private"`
	Instagram    *string    `json:"instagram"`
	Twitter      *string    `json:"twitter"`
	Facebook     *string    `json:"facebook" gorm:"-"`
	Telegram     *string    `json:"telegram" gorm:"-"`
	Line         *string    `json:"line"`
	Birthday     *time.Time `json:"birthday"`
	Email        *string    `json:"-" gorm:"column:user_email"`
}

type UserDetail struct {
	BaseUser
	IsFollowing       bool   `json:"is_following"`
	IsFollower        bool   `json:"is_follower"`
	IsPendingFollower bool   `json:"is_pending_follower"`
	FollowerCount     uint64 `json:"follower_count"`
	FollowingCount    uint64 `json:"following_count"`
}

type User struct {
	BaseUser
	Password           *string         `json:"-" gorm:"column:user_pass"`
	Gender             *uint           `json:"-"`
	CountryTelephone   *string         `json:"-"`
	FullTelp           *string         `json:"-"`
	FirebaseUid        *string         `json:"-"`
	LineId             *string         `json:"-"`
	Google             *string         `json:"-"`
	GoogleEmail        *string         `json:"-"`
	TelegramJson       *TelegramJson   `json:"-"`
	TelegramID         *string         `json:"-"`
	IgToken            *InstagramToken `json:"-"`
	Instagram          *string         `json:"-"`
	Gambar             *string         `json:"-" gorm:"column:gambar"`
	UserActivationKey  *string         `json:"-" gorm:"column:user_activation_key;"`
	Active             bool            `json:"-"`
	Block              bool            `json:"-"`
	CreatedAt          time.Time       `json:"-" gorm:"column:registrasi;"`
	Remove             bool            `json:"-"`
	RemoveDate         *time.Time      `json:"-"`
	TwitterToken       *TwitterToken   `json:"-"`
	FAEnable           bool            `json:"-" gorm:"column:fa_enable;"`
	FA                 *string         `json:"-" gorm:"column:FA;"`
	Webauthn           *WebauthnKeys   `json:"-" gorm:"column:security_key"`
	NewEmail           *string         `json:"-"`
	LastChangeUsername *time.Time      `json:"-"`
	PaidExpired        string          `json:"-" gorm:"column:paid_expired"`
	PrKey              *string         `json:"-"`
	PubKey             *string         `json:"-"`
}

func (u *User) ToPagination(c *Context) UserPagination {
	if u.Gambar != nil {
		pic := fmt.Sprintf("https://content.portalnesia.com/img/content?image=%s", url.QueryEscape(*u.Gambar))
		u.Picture = &pic
	}
	return UserPagination{
		ID:       u.ID,
		Name:     u.Name,
		Username: u.Username,
		Picture:  u.Picture,
		Verify:   u.Verify,
	}
}

func (u *User) ToAPI(c *Context) {
	// pagination := u.ToPagination(c)

}

func (User) TableName() string {
	return fmt.Sprintf("%susers", config.Prefix)
}

func (User) FindPagination(c *fiber.Ctx) {

}
